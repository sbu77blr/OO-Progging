

* Main Aim of OOP - to bind the data along with the function which will operate on them. So, no other code can access this data except for the function.

* Four main features :-
	- Abstraction.
	- Encapsulation.
	- Inheritence.
	- Polymorphism.

* Class - a logical entity used to define a user defined data type. (Usually modelling a real world entity)
	- Contains data members (variables), methods and constructors.
	- Data members : State & Methods : Behaviour of the Object.

	class class_name{

	};

* Object.
	- Object instantiation/creation: (static decleration)
		class_name obj;	

	- Dynamic creation:
		class_name * obj = new class_name();


131124.

* Access Specifiers - specifies access restrictions on the class members.
	=> public, private, protected.
	- Default : private.

* Public methods (member functions) are created to access the private data members. [+ on 071224]

171124
-> Constructor & Destructors :-
* def - spl func with same name as class, public, no-returnType,
		For initialising the class variables.

* Types :
	- Default : 0-Arg constructor.

	- Parameterized : args as provided by the progger.

	- Copy : takes an object as an arg and copies the values of one object's data into another object of the same class.
		=> class_name(class_name &obj)
			{
				... data_memN = obj.data_memN;
			}

* C++ provides a default constructor only until we create our own one.
	=> when progger doesn't specify a default constr but defines only a param one; then the compiler will not provide the default constructor.


* Constructor Overloading - more than one constructors w/ diff parameters so that each one performs a different task.
	=> diff in number of types of parameters.

* Destructors - spl func for releasing the resrces used by the object, during its lifetime.
	- Same name as class, tilde(~), no return type, no args. 
	- There can be only one destructor in a class.
	- Cannot access the address of the destructor.

* Destructors are alled when :
	> object goes out of scope.
	> prog ends.
	> a scope w/ a local variable ends.
	> delete operator is called.

* When a destructor isn't specified in the code, compiler itself provides a default one.
* If the object is created by using new or the constructor uses new to allocate memory that resides in the heap memory or the free store, the destructor should use delete to free the memory. (When should the destructor use delete to free the memory?)


181124 :-
-> 'this' pointer :-

* def - holds the address of the current object of the class.

* Three main usages :-
	- To refer to a current class instance variable.
	- To pass the current obj as a parameter to another method.
	- To declare indexers.

* this ptr is implicitly passed when member functions are called.
* 'this' ptr is accessible only in all the non-static class methods. 
	=> If a method is static, then it is common to all the objects & hence a single obj cannot refer to it independently.

* '->' operator is used to access the data and members using 'this' ptr.


// 191124
* Shallow Copy - here the pointer will be copied but not the memory which it points to.
	=> Orig object and created copy will point to the same memory addresss.
	Thus, any change made by one object will be visible in the other object too.

	- C++ compiler automatically creates a copy constr., and assignment operator to perform the shallow copy.

* Deep Copy - here the pointer will be created by copying each of the fields. It also allocates a new memory structure, similar to that of the earlier object.
	Changes made to the pointer / array values will not get reflected in the original pointer / array values.

// 071224
The Four Pillars of OOP.